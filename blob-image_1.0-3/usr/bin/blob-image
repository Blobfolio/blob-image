#!/bin/bash
#
# https://blobfolio.com
# version: 1.0
# Â©2016 Blobfolio, LLC. Some rights reserved.
#
# Blob Image
# Losslessly compress JPEG and PNG images
#
# USAGE:
# -q quiet
# -f file
# -mt optimize for multi-core machines
# -d directory



#--------------------------------------------------
# Default settings

use_file=false
use_dir=false
use_quiet=false
use_multithreaded=false
use_tmp="/dev/shm/"
use_self="$0"
use_time=`date +"%s.%N"`
use_output(){
	#echo if we aren't being quiet
	if [ "$use_quiet" == false ]; then
		echo $1
	fi
}



#--------------------------------------------------
# Parse arguments

while [[ $# > 1 ]]
do
key="$1"

case $key in
	-f)
	use_file="$2"
	shift # past argument
	;;
	-d)
	use_dir="$2"
	shift # past argument
	;;
	-q)
	use_quiet=true
	;;
	-mt)
	use_multithreaded=true
	;;
	*)
		# unknown option
	;;
esac
shift # past argument or value
done



#--------------------------------------------------
# Verify the mode

#files
if [ "$use_file" != false ]; then
	#file takes priority over directory
	use_dir=false

	if [ ! -f "$use_file" ]; then
		use_output "Invalid file."
		exit
	else
		#convert to full path, for consistency's sake
		use_file=`realpath "$use_file"`
	fi
#directory
elif [ "$use_dir" != false ]; then
	if [ ! -e "$use_dir" ]; then
		 use_output "Invalid directory."
	else
		#recurse to file mode
		find "$use_dir" -type f -regextype egrep -iregex '.*\.(jpe?g|png)' | while read i; do
			if [ "$use_quiet" != true ]; then
				use_line="$use_self -f \"$i\""
			else
				use_line="$use_self -q -f \"$i\""
			fi
			eval $use_line
		done
	fi
	exit;
#no mode
else
	use_output "Missing file or directory."
	exit
fi



#--------------------------------------------------
# Verify file type

use_type=`file -b --mime-type "$use_file"`

if [ "$use_type" == "image/jpeg" ]; then
	use_ext='jpg'
	use_apps=( "jpegoptim" "jpegrescan" )
elif [ "$use_type" == "image/png" ]; then
	use_ext='png'
	use_apps=( "optipng" "advpng" "pngcrush" "pngout" )
else
	use_output "Only JPEG and PNG files are supported."
	exit
fi



#--------------------------------------------------
# Work it!

#first, make some working copies
size_original=`wc -c < "$use_file"`
use_best="${use_tmp}blobimage-best.${use_time}.${use_ext}"
use_working="${use_tmp}blobimage-working.${use_time}.${use_ext}"
cp "$use_file" "$use_best"

#store the original owner info in case blob-image is being run as a stranger
use_user=`stat -c %U "$use_file"`
use_group=`stat -c %G "$use_file"`

#start the timer
use_start=`date +"%s.%N"`

use_output "--------------------------------------------------"
use_output "$use_file"
use_output "--------------------------------------------------"
use_output "     Type: $use_type"
use_output "     Size: $size_original bytes"

#loop through compression programs
for i in "${use_apps[@]}"; do
	use_app=`command -v $i || echo 0`

	if [ "$use_app" != "0" ]; then
		use_output ""
		use_output "     Recompressing with $i..."

		cp "$use_file" "$use_working"

		#each program is a little different...
		if [ "$i" == 'optipng' ]; then
			eval "$use_app -quiet -force -o7 \"$use_working\""
		elif [ "$i" == 'advpng' ]; then
			eval "$use_app -q -f -z4 \"$use_working\""
		elif [ "$i" == 'pngcrush' ]; then
			if [ "$use_multithreaded" == false ]; then
				eval "$use_app -rem gAMA -rem alla -rem cHRM -rem iCCP -rem sRGB -rem time \"$use_working\" \"$use_working.bak\" >/dev/null 2>&1"
			else
				eval "$use_app -rem gAMA -rem alla -brute -rem cHRM -rem iCCP -rem sRGB -rem time \"$use_working\" \"$use_working.bak\" >/dev/null 2>&1"
			fi
		elif [ "$i" == 'pngout' ]; then
			eval "$use_app \"$use_working\" -q"
		elif [ "$i" == 'jpegoptim' ]; then
			eval "$use_app -q -f --strip-all --all-progressive \"$use_working\""
		elif [ "$i" == 'jpegrescan' ]; then
			if [ "$use_multithreaded" == false ]; then
				eval "$use_app -q \"$use_working\" \"$use_working.bak\" && mv \"$use_working.bak\" \"$use_working\""
			else
				eval "$use_app -q -t \"$use_working\" \"$use_working.bak\" && mv \"$use_working.bak\" \"$use_working\""
			fi
		fi

		#check file sizes
		size_best=`wc -c < $use_best`
		size_working=`wc -c < $use_working`
		size_diff=`awk "BEGIN {printf \"%.2f\n\", $size_working/$size_original*100}"`

		#an improvement!
		if [ $size_working -lt $size_best ] && [ $size_working -gt 0 ]; then
			cp -f "$use_working" "$use_best"
			cp -f "$use_best" "$use_file"
			chown $use_user:$use_group "$use_file"
		fi

		use_output "     Size: $size_working bytes ($size_diff%)"

		rm "$use_working"

		#pngcrush leaves garbage behind
		if [ "$i" == 'pngcrush' ]; then
			rm "$use_working".bak
		fi
	fi
done

#wrap up!
size_best=`wc -c < $use_best`
use_end=`date +"%s.%N"`
use_duration=`awk "BEGIN {printf \"%.2f\n\", $use_end-$use_start}"`
use_output ""
use_output "     Done: $use_duration seconds"
if [ $size_best -lt $size_original ]; then
	size_diff=`awk "BEGIN {printf \"%.2f\n\", $size_best/$size_original*100}"`
	use_output "     Best: $size_best bytes ($size_diff%)"
else
	use_output "    No change."
fi

#log the result
echo `date +"%F %T"` \"$use_file\" From: $size_original To: $size_best >> /var/log/blob-image.log

rm "$use_best"

use_output ""
use_output ""