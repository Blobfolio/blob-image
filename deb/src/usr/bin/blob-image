#!/bin/bash
#
# blob-image
# version: 1.3.1
#
# Copyright © 2017 Blobfolio, LLC <https://blobfolio.com>
#
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2.
#
# USAGE:
#   -c	colors
#	-d	dry run
#   -h	help
#	-l	log file location
#   -m	optimize for multi-core machines
#   -q	quiet
#
#	--disable-advpng
#	--disable-jpegoptim
#	--disable-jpegrescan
#	--disable-jpegtran
#	--disable-oxipng
#	--disable-pngcrush
#	--disable-pngout
#
#	--max-age
#	--min-age
#	--max-size
#	--min-size
#
#	--skip-jpeg / --skip-jpg
#	--skip-png



# ----------------------------------------------------------------------
# Check Runtime Dependencies
# ----------------------------------------------------------------------

# Being a wrapper script, all the heavy lifting is done by hard-working
# system programs like awk and sed. Before we do anything else, let's
# make sure each of these can be found.
DEPENDENCIES=("awk" "bc" "cat" "date" "file" "find" "getopt" "realpath" "sed" "sort" "stat" "touch" "tr" "wc")
MISSING_DEP=false
for i in "${DEPENDENCIES[@]}"; do
	DEP_PATH=$(command -v "$i")
	if [ ! "$DEP_PATH" ]; then
		MISSING_DEP=true
		>&2 echo "Error: missing system program $i"
	fi
done
if [ "$MISSING_DEP" == true ]; then
	exit 1
fi

# ----------------------------------------------------------------------



# ----------------------------------------------------------------------
# Default settings
# ----------------------------------------------------------------------

BI_HELP=false						# Display help?

BI_COLOR=false						# Colored output.
BI_DRY=false						# Dry run.
BI_LOG="/var/log/blob-image.log"	# Log file.
BI_MT=false							# Multi-threading.
BI_QUIET=false						# Suppress stdout.
BI_SELF="$0"						# Script location.
BI_TMP="/dev/shm/"					# Working directory.

DISABLE_ADVPNG=false
DISABLE_JPEGOPTIM=false
DISABLE_JPEGRESCAN=false
DISABLE_JPEGTRAN=false
DISABLE_OXIPNG=false
DISABLE_PNGCRUSH=false
DISABLE_PNGOUT=false

SKIP_JPEG=false						# Skip JPEG files.
SKIP_PNG=false						# Skip PNG files.

declare -i MAX_AGE=0				# Maximum age (minutes).
declare -i MIN_AGE=0				# Minimum age (minutes).
declare -i MAX_SIZE=0				# Maximum size to scan.
declare -i MIN_SIZE=0				# Minimum size to scan.

TOTAL_TIME_START=$(date +"%s.%N")

BI_FILES=()							# Files to crunch.

# Fall back to /tmp if /dev/shm doesn't exist.
if [ ! -d "$BI_TMP" ]; then
	BI_TMP="/tmp/"
fi

#
# Output Wrapper
#
# Handle STDOUT options like color and quiet.
#
# @param string Message.
# @echo string|void Message.
#
bi_echo(){
	# Echo if we aren't being quiet.
	if [ "$BI_QUIET" == false ]; then
		local BI_LINE=$1

		# Strip colors.
		if [ "$BI_COLOR" == false ]; then
			BI_LINE=$(echo -e "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | sed "s/\x0f//g")
		fi

		echo -e "$BI_LINE"
	fi
}

#
# Byte Unit Handler
#
# Convert 123K, 123M, etc., to proper integer bytes.
#
# @param mixed Size w/ or w/o unit.
# @echo int Bytes.
#
bi_nicebytes() {
	local RAW=$1
	declare -i VALUE=0

	RAW=$(echo "$RAW" | sed 's/[^0-9gGmMkKbB]//g')
	if [ ! "$RAW" ]; then
		RAW=0
	fi

	for i in "g G m M k K b B"; do
		RAW=${RAW//[gG]/*1024m}
		RAW=${RAW//[mM]/*1024k}
		RAW=${RAW//[kK]/*1024}
		RAW=${RAW//[bB]/*1}
	done
	VALUE="$RAW"

	if [ ${VALUE//\*/} -gt 0 ]; then
		echo $VALUE
	else
		echo 0
	fi
}

#
# ABS Int
#
# Ensure we have an absolute integer.
#
# @param mixed Value.
# @echo int Value.
#
bi_absint() {
	local RAW=$1
	declare -i VALUE=0

	RAW=$(echo "$RAW" | sed 's/[^0-9]//g')
	if [ ! "$RAW" ]; then
		RAW=0
	fi

	VALUE="$RAW"

	if [ ${VALUE//\*/} -lt 0 ]; then
		VALUE=$(( 0 - $VALUE ))
	fi

	echo $VALUE
}

#
# Help
#
# Print help and use dialogue.
#
# @echo string Help.
#
bi_help(){
	BI_QUIET=false

	bi_echo "\e[1;34mblob-image\e[0m \e[90m------------------------------------------------------\e[0m v1.3.1"
	bi_echo ""
	bi_echo "blob-image is a lossless JPEG/PNG image compressor written in BASH. It"
	bi_echo "prioritizes compression over speed, running each image through a"
	bi_echo "battery of specialized binaries (if installed)."
	bi_echo ""
	bi_echo "\e[1;34mJPEG:\e[0m"
	bi_echo "jpegoptim   \e[35mhttps://github.com/tjko/jpegoptim\e[0m"
	bi_echo "jpegrescan  \e[35mhttps://github.com/kud/jpegrescan\e[0m"
	bi_echo "jpegtran    \e[35mhttps://github.com/mozilla/mozjpeg\e[0m"
	bi_echo ""
	bi_echo "\e[1;34mPNG:\e[0m"
	bi_echo "advpng      \e[35mhttp://www.advancemame.it/doc-advpng.html\e[0m"
	bi_echo "oxipng      \e[35mhttps://github.com/shssoichiro/oxipng\e[0m"
	bi_echo "pngcrush    \e[35mhttps://pmt.sourceforge.io/pngcrush/\e[0m"
	bi_echo "pngout      \e[35mhttp://advsys.net/ken/utils.htm\e[0m"
	bi_echo ""
	bi_echo "\e[1;34mUse:\e[0m"
	bi_echo "blob-image -args [file/dir] [file/dir]…"
	bi_echo ""
	bi_echo "\e[1;34mOptions:\e[0m"
	bi_echo "\e[1m-c\e[0m, \e[1m--color\e[0m"
	bi_echo "    Colorize output."
	bi_echo "\e[1m-d\e[0m, \e[1m--dry-run\e[0m"
	bi_echo "    Test compression without overriding original file."
	bi_echo "\e[1m-h\e[0m, \e[1m--help\e[0m"
	bi_echo "    Display this documentation."
	bi_echo "\e[1m-l\e[0m, \e[1m--log\e[0m=/path/to/log"
	bi_echo "    Log results to this file."
	bi_echo "    Default: /var/log/blob-image.log"
	bi_echo "\e[1m--max-age\e[0m=XX"
	bi_echo "    Files older than this (in minutes) will be skipped."
	bi_echo "    Modification time is used to determine age."
	bi_echo "\e[1m--min-age\e[0m=XX"
	bi_echo "    Files younger than this (in minutes) will be skipped."
	bi_echo "    Modification time is used to determine age."
	bi_echo "\e[1m--max-size\e[0m=XX"
	bi_echo "    Files larger than this value will be skipped. Value should be in"
	bi_echo "    bytes. K, M, and G units are allowed."
	bi_echo "\e[1m--min-size\e[0m=XX"
	bi_echo "    Files smaller than this value will be skipped. Value should be in"
	bi_echo "    bytes. K, M, and G units are allowed."
	bi_echo "\e[1m-m\e[0m, \e[1m--multithreaded\e[0m"
	bi_echo "    Optimize performance for multithreaded systems, where possible."
	bi_echo "\e[1m-q\e[0m, \e[1m--quiet\e[0m"
	bi_echo "    Suppress STDOUT."
	bi_echo ""
	bi_echo "\e[1m--disable-advpng\e[0m"
	bi_echo "    Do not execute advpng, even if installed."
	bi_echo "\e[1m--disable-jpegoptim\e[0m"
	bi_echo "    Do not execute jpegoptim, even if installed."
	bi_echo "\e[1m--disable-jpegrescan\e[0m"
	bi_echo "    Do not execute jpegrescan, even if installed."
	bi_echo "\e[1m--disable-jpegtran\e[0m"
	bi_echo "    Do not execute jpegtran, even if installed."
	bi_echo "\e[1m--disable-oxipng\e[0m"
	bi_echo "    Do not execute oxipng, even if installed."
	bi_echo "\e[1m--disable-pngcrush\e[0m"
	bi_echo "    Do not execute pngcrush, even if installed."
	bi_echo "\e[1m--disable-pngout\e[0m"
	bi_echo "    Do not execute pngout, even if installed."
	bi_echo ""
	bi_echo "\e[1m--skip-jpeg\e[0m"
	bi_echo "    Do not process any JPEG images."
	bi_echo "\e[1m--skip-png\e[0m"
	bi_echo "    Do not process any PNG images."
}



# ----------------------------------------------------------------------
# Parse arguments
# ----------------------------------------------------------------------

# Flags and options.
BI_ARGS=$(getopt -q -l "color,disable-advpng,disable-jpegoptim,disable-jpegrescan,disable-jpegtran,disable-oxipng,disable-pngcrush,disable-pngout,dry-run,help,log,max-age:,min-age:,max-size:,min-size:,multithreaded,quiet,skip-jpeg,skip-jpg,skip-png" -o "cdhl:mq" -- "$@")
eval set -- "$BI_ARGS"
while true ; do
	case "$1" in
		--) # End of arguments.
			shift
			break
			;;
		-c|--color) # Colorize output.
			BI_COLOR=true
			shift
			;;
		--disable-advpng) # Disable advpng.
			DISABLE_ADVPNG=true
			shift
			;;
		--disable-jpegoptim) # Disable jpegoptim.
			DISABLE_JPEGOPTIM=true
			shift
			;;
		--disable-jpegrescan) # Disable jpegrescan.
			DISABLE_JPEGRESCAN=true
			shift
			;;
		--disable-jpegtran) # Disable jpegtran.
			DISABLE_JPEGTRAN=true
			shift
			;;
		--disable-oxipng) # Disable oxipng.
			DISABLE_OXIPNG=true
			shift
			;;
		--disable-pngcrush) # Disable pngcrush.
			DISABLE_PNGCRUSH=true
			shift
			;;
		--disable-pngout) # Disable pngout.
			DISABLE_PNGOUT=true
			shift
			;;
		-d|--dry-run) # Dry run.
			BI_DRY=true
			shift
			;;
		-h|--help) # Help.
			BI_HELP=true
			shift
			;;
		-l|--log)
			case "$2" in
				""|-*)
					bi_echo "\e[1;31mValue required:\e[0m --log=/something/file.log"
					exit 1
					;;
				*)
					BI_LOG=$(realpath "$2")
					shift 2
					;;
			esac
			;;
		-m|--multithreaded) # Use multi-threading optimizations.
			BI_MT=true
			shift
			;;
		-q|--quiet) # Suppress output.
			BI_QUIET=true
			shift
			;;
		--max-age) # Max file age.
			case "$2" in
				""|-*)
					bi_echo "\e[1;31mValue required:\e[0m --max-age=123"
					exit 1
					;;
				*)
					MAX_AGE=$(bi_absint "$2")
					shift 2
					;;
			esac
			;;
		--min-age) # Max file age.
			case "$2" in
				""|-*)
					bi_echo "\e[1;31mValue required:\e[0m --min-age=123"
					exit 1
					;;
				*)
					MIN_AGE=$(bi_absint "$2")
					shift 2
					;;
			esac
			;;
		--max-size) # Max file size.
			case "$2" in
				""|-*)
					bi_echo "\e[1;31mValue required:\e[0m --max-size=123"
					exit 1
					;;
				*)
					MAX_SIZE=$(bi_nicebytes "$2")
					shift 2
					;;
			esac
			;;
		--min-size) # Max file size.
			case "$2" in
				""|-*)
					bi_echo "\e[1;31mValue required:\e[0m --min-size=123"
					exit 1
					;;
				*)
					MIN_SIZE=$(bi_nicebytes "$2")
					shift 2
					;;
			esac
			;;
		--skip-jpeg|--skip-jpg) # Do not process JPEG files.
			SKIP_JPEG=true
			shift
			;;
		--skip-png) # Do not process PNG files.
			SKIP_PNG=true
			shift
			;;
		-d|-f) # Deprecated. Paths will get checked below.
			shift
			;;
		*) # Unknown option.
			bi_echo "\e[1;31mInvalid option:\e[0m $1"
			bi_help
			exit 1
			;;
	esac
done

# Load help?
if [ $BI_HELP == true ]; then
	bi_help
	exit 0
fi



# ----------------------------------------------------------------------
# Find Files
# ----------------------------------------------------------------------

# First, optimize the find command.
BI_FIND_COND=""

# File types to search for.
if [ "$SKIP_JPEG" == false ] && [ "$SKIP_PNG" == false ]; then
	BI_FIND_COND+='\( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \)'
elif [ "$SKIP_JPEG" == false ]; then
	BI_FIND_COND+='\( -iname "*.jpg" -o -iname "*.jpeg" \)'
elif [ "$SKIP_PNG" == false ]; then
	BI_FIND_COND+='-iname "*.png"'
else
	bi_echo "\e[1;31mInvalid options:\e[0m --skip-jpeg and --skip-png cannot both be used."
	exit 1
fi

# File sizes to search for.
if [ "$MAX_SIZE" -gt 0 ] && [ "$MIN_SIZE" -gt 1 ]; then
	BI_FIND_COND+=' \( -size +'$(($MIN_SIZE - 1))'c -a -size -'$(($MAX_SIZE + 1))'c \)'
elif [ "$MAX_SIZE" -gt 0 ]; then
	BI_FIND_COND+=' -size -'$(($MAX_SIZE + 1))c
elif [ "$MIN_SIZE" -gt 1 ]; then
	BI_FIND_COND+=' -size +'$(($MIN_SIZE - 1))c
fi

# File ages to search for.
if [ "$MAX_AGE" -gt 0 ] && [ "$MIN_AGE" -gt 0 ]; then
	BI_FIND_COND+=' \( -mmin +'$(($MIN_AGE))' -a -mmin -'$(($MAX_AGE))' \)'
elif [ "$MAX_AGE" -gt 0 ]; then
	BI_FIND_COND+=' -mmin -'$(($MAX_AGE))
elif [ "$MIN_AGE" -gt 0 ]; then
	BI_FIND_COND+=' -mmin +'$(($MIN_AGE))
fi

# Build a list of paths to search from. We want to try to do this all in
# a single pass because performance becomes terrible if Bash arrays have
# to be sorted or merged later on.
BI_FIND_PATHS=()
for i in "$@"; do
	i=$(realpath "$i")
	if [ -f "$i" ]; then
		BI_FIND_PATHS+=("\"$i\"")
	elif [ -d "$i" ]; then
		BI_FIND_PATHS+=("\"$i\"")
	else
		bi_echo "\e[1;31mInvalid path:\e[0m $i"
	fi
done

# Finally, search!
while IFS= read -r -u3 -d $'\0' BI_LINE; do
	BI_FILES+=("$BI_LINE")
done 3< <(eval find "${BI_FIND_PATHS[@]}" $BI_FIND_COND -type f -print0 | sort -z)

# Gotta have at least one file to look at.
if [ ${#BI_FILES[@]} -lt 1 ]; then
	bi_echo "\e[1;31mError:\e[0m Nothing to do."
	exit 1
fi



# ----------------------------------------------------------------------
# Find binaries
# ----------------------------------------------------------------------
declare -A BI_BINARIES

BI_BINARIES[advpng]=$(command -v "advpng")
BI_BINARIES[jpegoptim]=$(command -v "jpegoptim")
BI_BINARIES[jpegrescan]=$(command -v "jpegrescan")
BI_BINARIES[jpegtran]=$(command -v "/opt/mozjpeg/bin/jpegtran") # Prefer mozjpeg version.
if [ ! "${BI_BINARIES[jpegtran]}" ]; then
	BI_BINARIES[jpegtran]=$(command -v "jpegtran")
fi
BI_BINARIES[oxipng]=$(command -v "oxipng")
BI_BINARIES[pngcrush]=$(command -v "pngcrush")
BI_BINARIES[pngout]=$(command -v "pngout")

BI_JPEG=()
if [ "$SKIP_JPEG" == false ]; then
	if [ "$DISABLE_JPEGTRAN" == false ] && [ "${BI_BINARIES[jpegtran]}" ]; then
		BI_JPEG+=("jpegtran")
	fi
	if [ "$DISABLE_JPEGOPTIM" == false ] && [ "${BI_BINARIES[jpegoptim]}" ]; then
		BI_JPEG+=("jpegoptim")
	fi
	if [ "$DISABLE_JPEGRESCAN" == false ] && [ "${BI_BINARIES[jpegrescan]}" ]; then
		BI_JPEG+=("jpegrescan")
	fi
fi

BI_PNG=()
if [ "$SKIP_PNG" == false ]; then
	if [ "$DISABLE_ADVPNG" == false ] && [ "${BI_BINARIES[advpng]}" ]; then
		BI_PNG+=("advpng")
	fi
	if [ "$DISABLE_PNGCRUSH" == false ] && [ "${BI_BINARIES[pngcrush]}" ]; then
		BI_PNG+=("pngcrush")
	fi
	if [ "$DISABLE_PNGOUT" == false ] && [ "${BI_BINARIES[pngout]}" ]; then
		BI_PNG+=("pngout")
	fi
	if [ "$DISABLE_OXIPNG" == false ] && [ "${BI_BINARIES[oxipng]}" ]; then
		BI_PNG+=("oxipng")
	fi
fi



# ----------------------------------------------------------------------
# Header
# ----------------------------------------------------------------------

bi_echo ""
bi_echo " _     _       _           _                             "
bi_echo "| |__ | | ___ | |__       (_)_ __ ___   __ _  __ _  ___  "
bi_echo "| '_ \| |/ _ \| '_ \ _____| | '_ \` _ \ / _\` |/ _\` |/ _ \ "
bi_echo "| |_) | | (_) | |_) |_____| | | | | | | (_| | (_| |  __/ "
bi_echo "|_.__/|_|\___/|_.__/      |_|_| |_| |_|\__,_|\__, |\___| "
bi_echo "                                             |___/       "
bi_echo ""



# ----------------------------------------------------------------------
# Crunch the files!
# ----------------------------------------------------------------------

BI_INDEX=0
TOTAL=${#BI_FILES[@]}
declare -i TOTAL_SIZE_ORIGINAL=0
declare -i TOTAL_SIZE_BEST=0
for i in "${BI_FILES[@]}"; do
	# Keep track of progress.
	TIME_START=$(date +"%s.%N")
	BI_INDEX=$[$BI_INDEX+1]
	BI_PROGRESS=$(awk "BEGIN {printf \"%.2f\n\", $BI_INDEX/$TOTAL*100}")"%"



	# We can only do something about JPEG and PNG files.
	FILE_TYPE=$(file -b --mime-type "$i")
	if [ "$FILE_TYPE" == "image/jpeg" ]; then
		# Skip it?
		if [ "$SKIP_JPEG" == true ]; then
			bi_echo "\e[1;33mSkipping file:\e[0m $i \e[90m(type)\e[0m"
			bi_echo ""
			bi_echo ""
			continue
		fi

		FILE_EXT="jpg"
		FILE_BINARIES=("${BI_JPEG[@]}")
	elif [ "$FILE_TYPE" == "image/png" ]; then
		# Skip it?
		if [ "$SKIP_PNG" == true ]; then
			bi_echo "\e[1;33mSkipping file:\e[0m $i \e[90m(type)\e[0m"
			bi_echo ""
			bi_echo ""
			continue
		fi

		FILE_EXT="png"
		FILE_BINARIES=("${BI_PNG[@]}")
	else
		bi_echo "\e[1;31mInvalid file:\e[0m $i"
		bi_echo ""
		bi_echo ""
		continue;
	fi



	# Make sure we have programs to use.
	if [ ${#BI_FILES[@]} -lt 1 ]; then
		bi_echo "\e[1;33mSkipping file:\e[0m $i \e[90m(no supported binaries)\e[0m"
		bi_echo ""
		bi_echo ""
		continue;
	fi



	# Sort out some other file properties.
	FILE_ORIGINAL="$i"
	declare -i SIZE_ORIGINAL=$(wc -c < "$FILE_ORIGINAL")
	FILE_USER=$(stat -c %U "$FILE_ORIGINAL")
	FILE_GROUP=$(stat -c %G "$FILE_ORIGINAL")



	# Is this file size within range?
	# Too big?
	if [ $MAX_SIZE -gt 0 ] && [ $MAX_SIZE -lt $SIZE_ORIGINAL ]; then
		bi_echo "\e[1;33mSkipping file:\e[0m $i \e[90m(size)\e[0m"
		bi_echo ""
		bi_echo ""
		continue
	fi
	# Too small?
	if [ $MIN_SIZE -gt 0 ] && [ $MIN_SIZE -gt $SIZE_ORIGINAL ]; then
		bi_echo "\e[1;33mSkipping file:\e[0m $i \e[90m(size)\e[0m"
		bi_echo ""
		bi_echo ""
		continue
	fi



	# Come up with a nice title. This is surprisingly complicated. Haha.
	BI_TITLE="$i"
	BI_LENGTH=$((71 - ${#BI_PROGRESS}))
	BI_PADLENGTH=0
	if [ ${#BI_TITLE} -gt $BI_LENGTH ]; then
		BI_TITLE="…${BI_TITLE: $((1 - $BI_LENGTH))}"
	elif [ ${#BI_TITLE} -lt $BI_LENGTH ]; then
		BI_PADLENGTH=$(($BI_LENGTH - ${#BI_TITLE}))
	fi
	if [ $BI_PADLENGTH -gt 0 ]; then
		BI_PAD="----------------------------------------------------------------------"
		BI_PAD="${BI_PAD:0:$BI_PADLENGTH}"
	else
		BI_PAD=""
	fi
	BI_TITLE="\e[1;34m$BI_TITLE\e[0m \e[90m$BI_PAD $BI_PROGRESS\e[0m"
	bi_echo "$BI_TITLE"



	# More file business.
	BI_RANDOM=$(( ( RANDOM % 9999 ) + 1 ))
	FILE_BEST="${BI_TMP}blobimage-best.${BI_RANDOM}.${FILE_EXT}"
	FILE_WORKING="${BI_TMP}blobimage-working.${BI_RANDOM}.${FILE_EXT}"
	while [ -f "$FILE_BEST" ] || [ -f "$FILE_WORKING" ]; do
		BI_RANDOM=$(( ( RANDOM % 9999 )  + 1 ))
		FILE_BEST="${BI_TMP}blobimage-best.${BI_RANDOM}.${FILE_EXT}"
		FILE_WORKING="${BI_TMP}blobimage-working.${BI_RANDOM}.${FILE_EXT}"
	done

	# Populate the best with the working file.
	cp "$FILE_ORIGINAL" "$FILE_BEST"

	bi_echo "\e[1;90mType:\e[0m $FILE_TYPE"
	bi_echo "\e[1;90mSize:\e[0m $SIZE_ORIGINAL bytes"



	# Crunch crunch crunch!
	for i in "${FILE_BINARIES[@]}"; do
		bi_echo ""
		bi_echo "\e[1m$i\e[0m"

		cp "$FILE_BEST" "$FILE_WORKING"



		# Run the appropriate binary.
		case $i in
			advpng)
				eval "\"${BI_BINARIES[$i]}\" -q -f -z4 \"$FILE_WORKING\""
				;;
			jpegoptim)
				eval "\"${BI_BINARIES[$i]}\" -q -f --strip-all --all-progressive \"$FILE_WORKING\""
				;;
			jpegrescan)
				if [ "$BI_MT" == false ]; then
					eval "\"${BI_BINARIES[$i]}\" -q \"$FILE_WORKING\" \"$FILE_WORKING.bak\" && mv \"$FILE_WORKING.bak\" \"$FILE_WORKING\""
				else
					eval "\"${BI_BINARIES[$i]}\" -q -t \"$FILE_WORKING\" \"$FILE_WORKING.bak\" && mv \"$FILE_WORKING.bak\" \"$FILE_WORKING\""
				fi
				;;
			jpegtran)
				eval "\"${BI_BINARIES[$i]}\" -copy none -optimize -progressive -outfile \"$FILE_WORKING.bak\" \"$FILE_WORKING\" && mv \"$FILE_WORKING.bak\" \"$FILE_WORKING\""
				;;
			oxipng)
				eval "\"${BI_BINARIES[$i]}\" -Zsq -o 4 -i 0 \"$FILE_WORKING\""
				;;
			pngcrush)
				if [ "$BI_MT" == false ]; then
					eval "\"${BI_BINARIES[$i]}\" -rem gAMA -rem alla -rem cHRM -rem iCCP -rem sRGB -rem time \"$FILE_WORKING\" \"$FILE_WORKING.bak\" >/dev/null 2>&1"
				else
					eval "\"${BI_BINARIES[$i]}\" -rem gAMA -rem alla -brute -rem cHRM -rem iCCP -rem sRGB -rem time \"$FILE_WORKING\" \"$FILE_WORKING.bak\" >/dev/null 2>&1"
				fi
				;;
			pngout)
				eval "\"${BI_BINARIES[$i]}\" \"$FILE_WORKING\" -q"
				;;
		esac



		# What happened?"
		declare -i SIZE_WORKING=$(wc -c < "$FILE_WORKING")
		declare -i SIZE_BEST=$(wc -c < "$FILE_BEST")
		SIZE_DIFF=$(awk "BEGIN {printf \"%.2f\n\", $SIZE_WORKING/$SIZE_ORIGINAL*100}")



		# An improvement!
		if [ $SIZE_WORKING -lt $SIZE_BEST ] && [ $SIZE_WORKING -gt 0 ]; then
			cp -f "$FILE_WORKING" "$FILE_BEST"
			if [ "$BI_DRY" == false ]; then
				cp -f "$FILE_BEST" "$FILE_ORIGINAL"
				chown "$FILE_USER":"$FILE_GROUP" "$FILE_ORIGINAL"
			fi
		fi



		# Report change.
		if [ $SIZE_WORKING -lt $SIZE_ORIGINAL ]; then
			bi_echo "\e[1;90mSize:\e[0m $SIZE_WORKING bytes \e[32m($SIZE_DIFF%)\e[0m"
		elif [ $SIZE_WORKING -eq $SIZE_ORIGINAL ]; then
			bi_echo "\e[1;90mSize:\e[0m $SIZE_WORKING bytes \e[33m($SIZE_DIFF%)\e[0m"
		else
			bi_echo "\e[1;90mSize:\e[0m $SIZE_WORKING bytes \e[31m($SIZE_DIFF%)\e[0m"
		fi



		# Clean up.
		if [ -e "$FILE_WORKING" ]; then
			rm "$FILE_WORKING"
		fi
		if [ -e "$FILE_WORKING.bak" ]; then
			rm "$FILE_WORKING.bak"
		fi
	done


	# Wrap up.
	declare -i SIZE_BEST=$(wc -c < "$FILE_BEST")
	TIME_END=$(date +"%s.%N")
	TIME_ELAPSED=$(awk "BEGIN {printf \"%.2f\n\", $TIME_END-$TIME_START}")
	bi_echo ""
	bi_echo "\e[1;90mDone:\e[0m $TIME_ELAPSED seconds"

	if [ "$BI_DRY" == false ]; then
		if [ $SIZE_BEST -lt $SIZE_ORIGINAL ]; then
			TOTAL_SIZE_ORIGINAL=$(( $TOTAL_SIZE_ORIGINAL + $SIZE_ORIGINAL ))
			TOTAL_SIZE_BEST=$(( $TOTAL_SIZE_BEST + $SIZE_BEST ))

			SIZE_DIFF=$(awk "BEGIN {printf \"%.2f\n\", $SIZE_BEST/$SIZE_ORIGINAL*100}")
			bi_echo "\e[1;90mBest:\e[0m $SIZE_BEST bytes \e[32m($SIZE_DIFF%)\e[0m"
		else
			bi_echo "\e[1;90mNo change.\e[0m"
		fi
	fi

	rm "$FILE_BEST"



	# Log the result.
	if [ ! -f "$BI_LOG" ]; then
		if [ ! $(touch "$BI_LOG" 2>/dev/null) ]; then
			bi_echo "\e[1;31mLogging failed:\e[0m could not create $BI_LOG"
		fi
	fi

	if [ -f "$BI_LOG" ]; then
		echo $(date +"%F %T") \""$FILE_ORIGINAL"\" From: "$SIZE_ORIGINAL" To: "$SIZE_BEST" >> "$BI_LOG"
	fi



	bi_echo ""
	bi_echo ""
done



# ----------------------------------------------------------------------
# Footer
# ----------------------------------------------------------------------

bi_echo " ____                   _ "
bi_echo "|  _ \  ___  _ __   ___| | "
bi_echo "| | | |/ _ \| '_ \ / _ \ | "
bi_echo "| |_| | (_) | | | |  __/_| "
bi_echo "|____/ \___/|_| |_|\___(_) "
bi_echo ""

bi_echo "\e[1mImages:\e[0m  ${#BI_FILES[@]}"

TOTAL_TIME_END=$(date +"%s.%N")
TOTAL_TIME_ELAPSED=$(awk "BEGIN {printf \"%.2f\n\", $TOTAL_TIME_END-$TOTAL_TIME_START}")
bi_echo "\e[1mRuntime:\e[0m $TOTAL_TIME_ELAPSED seconds"

if [ $TOTAL_SIZE_BEST -lt $TOTAL_SIZE_ORIGINAL ]; then
	TOTAL_SAVED=$(( $TOTAL_SIZE_ORIGINAL - $TOTAL_SIZE_BEST ))
	bi_echo "\e[1mSaved:\e[0m   \e[1;32m$TOTAL_SAVED bytes\e[0m"
else
	bi_echo "\e[1mSaved:\e[0m   \e[1;33m0 bytes\e[0m"
fi

if [ "$BI_DRY" == true ]; then
	bi_echo "\e[1mDry Run:\e[0m No files were overridden."
fi

bi_echo ""



# That's all, folks.
exit 0
